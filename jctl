#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Interact with Jamf Pro Server

Examples:

# List app policies
$> pctl policy list

"""


__author__ = 'Sam Forester'
__email__ = 'sam.forester@utah.edu'
__copyright__ = 'Copyright (c) 2020 University of Utah, Marriott Library'
__license__ = 'MIT'
__version__ = "1.0.6"
min_jamf_version = "0.4.9"


from pprint import pprint
import argparse
import jamf
import logging
import pathlib
import sys

#import jamf.admin
from jamf.package import Package
#import jamf.config


class Parser:
    def __init__(self):
        valid_jamf_records = jamf.records.valid_records()
        self.parser = argparse.ArgumentParser()
        # https://docs.python.org/3/library/argparse.html

        self.parser.add_argument('-c', '--config', help='path to config file')

        self.parser.add_argument('-v', '--version', action='store_true',
            help='print version and exit')

        desc = 'see `%(prog)s COMMAND --help` for more information'
        self.subparsers = self.parser.add_subparsers(title='COMMANDS',
            dest='arg1',
#             required=True,
            description=desc)

        #######################################################################
        # Info

        info = self.subparsers.add_parser('info', help='list',
             description='Valid Jamf Records are: '+', '.join(valid_jamf_records))
        info.add_argument('record', metavar='RECORD',
            choices=valid_jamf_records, help='print jamf record info')
        info.add_argument('name', metavar='NAME', nargs='*',
            help='print jamf record info')
        info.add_argument('-p', '--path', action='append',
            help='Print out path (e.g. \'-p general -p serial_number\'')

        # Package args
        info.add_argument('-f', '--file', action='store_true',
            help='path to pkg file (only works with Packages, was `patch.py info FILE`)')

        # Patch args
        info.add_argument('-P', '--patches', action='store_true',
            help='list patch policies current versions for '
                 'SoftwareTitle NAME')
        info.add_argument('-v', '--versions', action='store_true',
            help='info SoftwareTitle versions and packages for NAME'
                 ' (was `patch.py list --versions NAME`)')

        #######################################################################
        # List

        list = self.subparsers.add_parser('list', help='list',
             description='Valid Jamf Records are: '+', '.join(valid_jamf_records))
        list.add_argument('record', metavar='RECORD',
            choices=valid_jamf_records, help='list jamf records')
        list.add_argument('name', metavar='REGEX', action='store', nargs='?',
            help='list jamf records with names that match REGEX')

        #######################################################################
        # New

        neu = self.subparsers.add_parser('new', help='new',
             description='Valid Jamf Records are: '+', '.join(valid_jamf_records))
        neu.add_argument('record', metavar='RECORD',
            choices=valid_jamf_records, help='new jamf record')
        neu.add_argument('name', metavar='NAME',
            help='new jamf records')

        #######################################################################
        # Remove

        remove = self.subparsers.add_parser('remove', help='remove',
             description='Valid Jamf Records are: '+', '.join(valid_jamf_records))
        remove.add_argument('record', metavar='RECORD',
            choices=valid_jamf_records, help='remove jamf record')
        remove.add_argument('name', metavar='REGEX', action='store', nargs='?',
            help='remove jamf records with names that match REGEX')

        #######################################################################
        # Update

        update = self.subparsers.add_parser('update', help='update',
             description='Valid Jamf Records are: '+', '.join(valid_jamf_records))
        update.add_argument('record', metavar='RECORD',
            choices=valid_jamf_records, help='update jamf record')
        update.add_argument('name', metavar='REGEX', action='store', nargs='?',
            help='update jamf record')

        #######################################################################
        # Upload

        upload = self.subparsers.add_parser('upload', help='upload',
             description='Valid Jamf Records are: '+', '.join(valid_jamf_records))
        upload.add_argument('record', metavar='RECORD',
            choices=['Packages'], help='upload jamf record')
        upload.add_argument('name', metavar='REGEX', action='store', nargs='?',
            help='upload jamf record')

    def parse(self, argv):
        """
        :param argv:    list of arguments to parse
        :returns:       argparse.NameSpace object
        """
        return self.parser.parse_args(argv)

def check_version():

    try:
        jamf_first, jamf_second, jamf_third = jamf.__version__.split(".")
        min_first, min_second, min_third = min_jamf_version.split(".")

        if ( int(jamf_first) <= int(min_first) and
             int(jamf_second) <= int(min_second) and
             int(jamf_third) < int(min_third)):
             print(f"Your Version is: {jamf.__version__}, you need at least "
                   f"version {min_jamf_version} to run this version of jctl.")
             sys.exit()

    except AttributeError:
             print(f"Your Version is below 0.4.2, you need at least version "
                   f"{min_jamf_version} to run this version of jctl.")
             sys.exit()


###############################################################################

###############################################################################
# Package
###############################################################################

# def package_notes(path):
#     path = pathlib.Path(path)
#     *name, ver, date, author = path.stem.split('_')
#     return f"{date}, {author.upper()}"

###############################################################################
# Patch
###############################################################################

def list_softwaretitles(api, name=None):
    p = api.get('patchsoftwaretitles')
    titles = p['patch_software_titles']['patch_software_title']
    if name:
        # only names that start with name (case-sensitive)
        result = [x['name'] for x in titles if x['name'].startswith(name)]
    else:
        # all names
        result = [x['name'] for x in titles]
    # print sorted list of resulting Patch SoftwareTitle names
    for n in sorted(result):
        print(n)

def list_softwaretitle_versions(api, name):
    title = find_softwaretitle(api, name)['patch_software_title']
    versions = []
    # get each version and assoiciated package (if one)
    for version in title['versions']['version']:
        v = version['software_version']
        # {name of pkg} or '-'
        p = version['package']['name'] if version['package'] else '-'
        versions.append((v, p))
    # print formatted result
    print_version_key_list(versions)

def find_softwaretitle(api, name, details=True):
    """
    :param api:         jamf.api.API object
    :param name:        softwaretitle name
    :param details:     if False, return simple (id + name) (default: True)

    :returns:           patch softwaretitle information
    """
    logger = logging.getLogger(__name__)
    logger.debug(f"looking for existing software title: {name}")
    # Iterate all Patch Management Titles for specified matching name
    data = api.get('patchsoftwaretitles')['patch_software_titles']
    for title in data['patch_software_title']:
        if title['name'] == name:
            logger.debug(f"found title: {name!r}")
            if details:
                logger.debug("returning detailed title info")
                jssid = title['id']
                return api.get(f"patchsoftwaretitles/id/{jssid}")
            else:
                logger.debug("returning simple title info")
                return title
    raise ValueError(f"missing software title: {name!r}")

def print_version_key_list(versions):
    """
    Prints formatted (justified) list of key/value tuple pairs

    e.g.  [('1.0', 'justified text'),
           ('1.0.0', '-'),
           ('2.0', ''),
           ('2.0.0.2.a', 'longest version key')]
    would print:
    '''
      1.0:        justified text
      1.0.0:      -
      2.0:
      2.0.0.2.a:  longest version key
    '''

    :param versions <list>:  list of tuple key/value pairs
                              e.g. [('1.O', 'info'), ('1.0.0', 'more'), ...]
    """
    # get length of the longest key
    longest = sorted([len(k) for k, v in versions])[-1]
    for ver, value in versions:
        # dynamic right-justification of value based on longest version key
        justification = (longest - len(ver)) + len(value)
        print(f"  {ver}:  {value:>{justification}}")

def list_softwaretitle_policy_versions(api, name):
    jssid = find_softwaretitle(api, name, details=False)['id']
    versions = []
    for patch in softwaretitle_policies(api, jssid):
        p = api.get(f"patchpolicies/id/{patch['id']}")
        version = p['patch_policy']['general']['target_version']
        versions.append((version, patch['name']))
    # print formatted result
    print_version_key_list(versions)

def softwaretitle_policies(api, jssid):
    """
    :returns: list of software title patch policies
    """
    endpoint = f"patchpolicies/softwaretitleconfig/id/{jssid}"
    return api.get(endpoint)['patch_policies']['patch_policy']

# def update_softwaretitle_versions(api, name, versions, pkgs=None):
#     """
#     Update all
#     :param api:      JSS API object
#     :param name:     external patch definition name
#     :param versions: {'Tech': version, 'Guinea Pig': version, 'Stable': version}
#     :returns:
#     """
#     logger = logging.getLogger(__name__)
#     jssid = find_softwaretitle(api, name, details=False)['id']
#
#     if pkgs:
#         update_softwaretitle_packages(api, jssid, pkgs)
#
#     for p in softwaretitle_policies(api, jssid):
#         # 'Tech - Test Boxes - Keynote' -> 'Tech'
#         # 'Guinea Pig - Lab - Xcode' -> 'Guinea Pig'
#         branch = p['name'].split(' - ')[0]
#         try:
#             update_patch_policy_version(api, p['id'], versions[branch])
#         except KeyError:
#             logger.debug(f"skipping: {p['name']!r}")
#
# def update_patch_policy_version(api, jssid, version):
#     """
#     Update Patch Policy version
#     """
#     logger = logging.getLogger(__name__)
#     current = api.get(f"patchpolicies/id/{jssid}")
#     current_version = current['patch_policy']['general']['target_version']
#     name = current['patch_policy']['general']['name']
#
#     if current_version != version:
#         logger.info(f"updating: {name!r}: {version}")
#         data = {'patch_policy': {'general': {'target_version': version}}}
#         api.put(f"patchpolicies/id/{jssid}", data)
#     else:
#         logger.debug(f"already updated: {name}: {version}")
#
# def update_softwaretitle_packages(api, jssid, pkgs):
#     """
#     Update packages of software title
#     :param jssid:        Patch Software Title ID
#     :param pkgs:         dict of {version: package, ...}
#     :returns: None
#     """
#     logger = logging.getLogger(__name__)
#
#     data = api.get(f"patchsoftwaretitles/id/{jssid}")
#     title = data['patch_software_title']
#
#     title_name = title['name']
#     logger.info(f"updating patch software title: {title_name} ({jssid})")
#
#     # single version (dict), multiple versions (list)
#     version = title['versions']['version']
#     _modified = False
#     try:
#         # access key of single version and count on TypeError being raised
#         v = version['software_version']
#         if v in pkgs.keys():
#             version['package'] = {'name': pkgs[v]}
#             _modified = True
#
#     except TypeError:
#         # looks like it was actually a list
#         for _version in version:
#             v = _version['software_version']
#             if v in pkgs.keys():
#                 _version['package'] = {'name': pkgs[v]}
#                 _modified = True
#
#     if _modified:
#         result = api.put(f"patchsoftwaretitles/id/{jssid}", data)
#         logger.info(f"succesfully updated: {title_name}")
#         return result
#     else:
#         logger.info(f"software title was not modified")

###############################################################################


def main(argv):
    logger = logging.getLogger(__name__)
    timmy = Parser()
    args = timmy.parse(argv)
    valid_jamf_records = jamf.records.valid_records()
    logger.debug(f"args: {args!r}")

    if args.version:
        print("jctl "+__version__)
        print("python_jamf "+jamf.__version__+ " ("+min_jamf_version+" required)")
        exit()

    check_version()
    #pprint(args)

    if args.config:
        api = jamf.API(config_path=args.config)
    else:
        api = jamf.API()

    if args.record:
        jamf_record = jamf.records.class_name(args.record)

    ###########################################################################
    # Info
    if args.arg1 == 'info':
        for name in args.name:
            if args.file:
                if args.record == "Packages":
                    # `patch.py info FILE`
                    pprint(Package(name).apps)
                else:
                    print("-f only works for Packages")
                    exit(1)

            elif args.patches:
                if args.record == "PatchSoftwareTitles":
                    # `patch.py list --patches NAME`
                    list_softwaretitle_policy_versions(api, name)
                else:
                    print("-P only works for PatchSoftwareTitles")
                    exit(1)

            elif args.versions:
                if args.record == "PatchSoftwareTitles":
                    # `patch.py list --versions NAME`
                    list_softwaretitle_versions(api, name)
                else:
                    print("-v only works for PatchSoftwareTitles")
                    exit(1)

            else:
                if args.record in ["PatchSoftwareTitles"]:
                    # Workaround (PatchSoftwareTitles doesn't have name search)
                    # This might need to be made generic in records.py
                    id = jamf_record().id(name)
                    if args.path:
                        print(jamf_record(id).path(args.path))
                    else:
                        jamf_record(id).print()

                else:
                    # EVERYTHING ELSE
                    if args.path:
                        print(jamf_record(name).path(args.path))
                    else:
                        jamf_record(name).print()

    ###########################################################################
    # List
    elif args.arg1 == 'list':
        jamf_record().list(args.name)

    ###########################################################################
    # New
    elif args.arg1 == 'new':
        print("new")

    ###########################################################################
    # Remove
    elif args.arg1 == 'remove':
        print("remove")

# Package
#             path = pathlib.Path(args.name)
#             if path.name != str(path):
#                 raise SystemExit("must specify package name not path")
#             admin = jamf.JamfAdmin()
#             try:
#                 pkg = admin.find(path.name)
#             except jamf.admin.MissingPackageError:
#                 logger.error(f"package already removed: {path.name}")
#             else:
#                 admin.delete(pkg)
    ###########################################################################
    # Update
    elif args.arg1 == 'update':
        print("update")

# Patch
#             # update patch software titles and/or patch policies
#             v = {'Tech': args.tech,
#                  'Guinea Pig': args.guinea_pig,
#                  'Stable': args.stable}
#             versions = {k:v for k, v in v.items() if v}
#             pkgs = {x[0]: x[1] for x in args.pkg}
#
#             logger.debug(f"NAME: {args.name}")
#             logger.debug(f"VERSIONS: {versions!r}")
#             logger.debug(f"PKGS: {pkgs!r}")
#
#             update_softwaretitle_versions(api, args.name, versions, pkgs)
    ###########################################################################
    # Upload
    elif args.arg1 == 'upload':
       print("upload")

# Package
#             pkg = Package(args.path)
#             # try:
#             #     info = pkg.info
#             # except Exception:
#             #     raise SystemExit(f"invalid package: {args.path!r}")
#             admin = jamf.admin.JamfAdmin()
#             #admin = jamf.Admin()
#             try:
#                 uploaded = admin.add(pkg)
#             except jamf.admin.DuplicatePackageError as e:
#                 if not args.force:
#                     raise e
#                 uploaded = admin.find(pkg.name)
#             admin.update(uploaded, notes=package_notes(uploaded.path))


if __name__ == '__main__':
    fmt = '%(asctime)s: %(levelname)8s: %(name)s - %(funcName)s(): %(message)s'
    logging.basicConfig(level=logging.INFO, format=fmt)
    main(sys.argv[1:])
