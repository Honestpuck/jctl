#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Interact with Jamf Pro Server

Examples:

# List app policies
$> pctl policy list

"""


__author__ = 'James Reynolds'
__email__ = 'reynolds@biology.utah.edu'
__copyright__ = 'Copyright (c) 2020, The University of Utah'
__license__ = 'MIT'
__version__ = "1.0.4"
min_jamf_version = "0.4.7"


from pprint import pprint
import argparse
import jamf
import logging
import pathlib
import sys

#import jamf.admin
from jamf.package import Package
#import jamf.config


class Parser:
    def __init__(self):
        self.parser = argparse.ArgumentParser()
        # https://docs.python.org/3/library/argparse.html

        desc = 'see `%(prog)s COMMAND --help` for more information'
        self.subparsers = self.parser.add_subparsers(title='COMMANDS',
                            dest='arg1',
                            metavar='{package|patch|policy}',
                            required=True,
                            description=desc)

        # Package
        package = self.subparsers.add_parser('package',
                            help='info, list, remove, update, upload',
                            description="")
        package2 = package.add_subparsers(title='SUBCOMMANDS',
                            metavar='{info|list|remove|update|upload}',
                            dest='arg2',
                            required=True)
        package2.add_parser('info',
                            help='Package info')
        package2.add_parser('list',
                            help='List all packages')
        package2.add_parser('remove',
                            help='Remove a package')
        package2.add_parser('update',
                            help='Update a package description')
        package2.add_parser('upload',
                            help='Upload package')

        # Patch
        desc = 'see `%(prog)s SUBCOMMAND --help` for more information'
        patch = self.subparsers.add_parser('patch', help='list, update',
                            description=desc)
        patch2 = patch.add_subparsers(title='SUBCOMMANDS',
                            metavar='{list|update}',
                            dest='arg2',
                            required=True)
        patch_list = patch2.add_parser('list',
                            help='without arguments, list all software titles (was `./patch.py list`)')
        patch_list.add_argument('name', metavar='NAME', action='store', nargs='?',
                            help='list patch that starts with name')
        patch_list.add_argument('-p', '--pkgs', action='store_true',
                            help='list jss packages starting with NAME (or all if no NAME)')
        patch_list.add_argument('-P', '--patches', action='store_true',
                            help='list patch policies current versions for SoftwareTitle NAME')
        patch_list.add_argument('-v', '--versions', action='store_true',
                            help='list SoftwareTitle versions and packages for NAME')

        patch2.add_parser('update',
                            help='Update patch')

        # Policy
        policy = self.subparsers.add_parser('policy',
                            help='list',
                            description="")
        policy2 = policy.add_subparsers(title='SUBCOMMANDS',
                            metavar='{list}',
                            dest='arg2',
                            required=True)
        policy2.add_parser('list',
                            help='List all policies (was `patch.py list --ids`)')


    def parse(self, argv):
        """
        :param argv:    list of arguments to parse
        :returns:       argparse.NameSpace object
        """
        return self.parser.parse_args(argv)

def check_version():

    try:
        jamf_first, jamf_second, jamf_third = jamf.__version__.split(".")
        min_first, min_second, min_third = min_jamf_version.split(".")

        if ( int(jamf_first) <= int(min_first) and
             int(jamf_second) <= int(min_second) and
             int(jamf_third) < int(min_third)):
             print(f"Your Version is: {jamf.__version__}, you need at least version {min_jamf_version} to run jctl.")
             sys.exit()

    except AttributeError:
             print(f"Your Version is below 0.4.2, you need at least version {min_jamf_version} to run jctl.")
             sys.exit()


###############################################################################

###############################################################################
# Package
###############################################################################

###############################################################################
# Patch
###############################################################################

def list_softwaretitles(api, name=None):
    p = api.get('patchsoftwaretitles')
    titles = p['patch_software_titles']['patch_software_title']
    if name:
        # only names that start with name (case-sensitive)
        result = [x['name'] for x in titles if x['name'].startswith(name)]
    else:
        # all names
        result = [x['name'] for x in titles]
    # print sorted list of resulting Patch SoftwareTitle names
    for n in sorted(result):
        print(n)

###############################################################################
# Policy
###############################################################################

def print_policies_ids(api):
    (ids, id_name) = list_policies_ids(api)
    for b in range(len(ids)):
        print("ID: " + ids[b] + " Name: " + id_name[b])

def list_policies_ids(api):
    p = api.get('policies')
    pls = p['policies']['policy']
    ids = [x['id'] for x in pls]
    id_name = [x['name'] for x in pls]
    return(ids, id_name)

###############################################################################


def main(argv):
    logger = logging.getLogger(__name__)
    args = Parser().parse(argv)
    logger.debug(f"args: {args!r}")
    api = jamf.API()
    pprint(args)
    if args.arg1 == 'package':
        if 'info' in args.arg2:
            print("package info")
        if 'list' in args.arg2:
            print("package list")
        if 'remove' in args.arg2:
            print("package remove")
        if 'update' in args.arg2:
            print("package update")
        if 'upload' in args.arg2:
            print("package upload")

    elif args.arg1 == 'patch':
        if 'list' in args.arg2:
            list_softwaretitles(api, args.name)
        elif 'update' in args.arg2:
            print("patch update")

    elif args.arg1 == 'policy':
        if 'list' in args.arg2:
            print_policies_ids(api)


if __name__ == '__main__':
    # check_version()
    fmt = '%(asctime)s: %(levelname)8s: %(name)s - %(funcName)s(): %(message)s'
    logging.basicConfig(level=logging.INFO, format=fmt)
    main(sys.argv[1:])
