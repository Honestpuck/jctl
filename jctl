#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Interact with Jamf Pro Server

Examples:

# List app policies
$> pctl policy list

"""


__author__ = 'Sam Forester'
__email__ = 'sam.forester@utah.edu'
__copyright__ = 'Copyright (c) 2020 University of Utah, Marriott Library'
__license__ = 'MIT'
__version__ = "1.0.8"
min_jamf_version = "0.5.4"


from pprint import pprint
import argparse
import jamf
import json
import logging
import pathlib
import re
import sys

#import jamf.admin
from jamf.package import Package
#import jamf.config


class Parser:
    def __init__(self):
        valid_jamf_records = [x.lower() for x in jamf.records.valid_records()]
        self.parser = argparse.ArgumentParser()
        # https://docs.python.org/3/library/argparse.html
        self.parser.add_argument('-c', '--config', help='path to config file')
        self.parser.add_argument('-v', '--version', action='store_true',
            help='print version and exit')
        self.parser.add_argument('record', metavar='RECORD',
            choices=valid_jamf_records, help='Valid Jamf Records are: '+
            ', '.join(valid_jamf_records))
        self.parser.add_argument('-n', '--name', nargs='*',
            help='Search for exact name matches')
        self.parser.add_argument('-r', '--regex', nargs='*',
            help='Search for regular expression matches')
        self.parser.add_argument('-i', '--id', nargs='*',
            help='Search for id matches')
        self.parser.add_argument('-s', '--searchpath', action='append',
            help='Search for a path (e.g. \'-p general,id=152\'')
        # Print options
        self.parser.add_argument('-l', '--long', action='store_true',
            help='List long format')
        self.parser.add_argument('-j', '--json', action='store_true',
            help='Print json')
        self.parser.add_argument('--quiet-as-a-mouse', action='store_true',
            help='Don\'t print anything')
        # Path
        self.parser.add_argument('-p', '--path', action='append',
            help='Print out path (e.g. \'-p general -p serial_number\')')
        # Actions
        self.parser.add_argument('-d', '--rm', action='store_true',
            help='Delete jamf record')
        self.parser.add_argument('--use-the-force-luke', action='store_true',
            help="Don't ask to delete. DANGER! This can delete everything!")

    def parse(self, argv):
        """
        :param argv:    list of arguments to parse
        :returns:       argparse.NameSpace object
        """
        return self.parser.parse_args(argv)

def check_version():

    try:
        jamf_first, jamf_second, jamf_third = jamf.__version__.split(".")
        min_first, min_second, min_third = min_jamf_version.split(".")

        if ( int(jamf_first) <= int(min_first) and
             int(jamf_second) <= int(min_second) and
             int(jamf_third) < int(min_third)):
             print(f"Your Version is: {jamf.__version__}, you need at least "
                   f"version {min_jamf_version} to run this version of jctl.")
             sys.exit()

    except AttributeError:
             print(f"Your Version is below 0.4.2, you need at least version "
                   f"{min_jamf_version} to run this version of jctl.")
             sys.exit()


###############################################################################

###############################################################################
# Package
###############################################################################

# def package_notes(path):
#     path = pathlib.Path(path)
#     *name, ver, date, author = path.stem.split('_')
#     return f"{date}, {author.upper()}"

###############################################################################
# Patch
###############################################################################

def list_softwaretitles(api, name=None):
    p = api.get('patchsoftwaretitles')
    titles = p['patch_software_titles']['patch_software_title']
    if name:
        # only names that start with name (case-sensitive)
        result = [x['name'] for x in titles if x['name'].startswith(name)]
    else:
        # all names
        result = [x['name'] for x in titles]
    # print sorted list of resulting Patch SoftwareTitle names
    for n in sorted(result):
        print(n)

def list_softwaretitle_versions(api, name):
    title = find_softwaretitle(api, name)['patch_software_title']
    versions = []
    # get each version and assoiciated package (if one)
    for version in title['versions']['version']:
        v = version['software_version']
        # {name of pkg} or '-'
        p = version['package']['name'] if version['package'] else '-'
        versions.append((v, p))
    # print formatted result
    print_version_key_list(versions)

def find_softwaretitle(api, name, details=True):
    """
    :param api:         jamf.api.API object
    :param name:        softwaretitle name
    :param details:     if False, return simple (id + name) (default: True)

    :returns:           patch softwaretitle information
    """
    logger = logging.getLogger(__name__)
    logger.debug(f"looking for existing software title: {name}")
    # Iterate all Patch Management Titles for specified matching name
    data = api.get('patchsoftwaretitles')['patch_software_titles']
    for title in data['patch_software_title']:
        if title['name'] == name:
            logger.debug(f"found title: {name!r}")
            if details:
                logger.debug("returning detailed title info")
                jssid = title['id']
                return api.get(f"patchsoftwaretitles/id/{jssid}")
            else:
                logger.debug("returning simple title info")
                return title
    raise ValueError(f"missing software title: {name!r}")

def print_version_key_list(versions):
    """
    Prints formatted (justified) list of key/value tuple pairs

    e.g.  [('1.0', 'justified text'),
           ('1.0.0', '-'),
           ('2.0', ''),
           ('2.0.0.2.a', 'longest version key')]
    would print:
    '''
      1.0:        justified text
      1.0.0:      -
      2.0:
      2.0.0.2.a:  longest version key
    '''

    :param versions <list>:  list of tuple key/value pairs
                              e.g. [('1.O', 'info'), ('1.0.0', 'more'), ...]
    """
    # get length of the longest key
    longest = sorted([len(k) for k, v in versions])[-1]
    for ver, value in versions:
        # dynamic right-justification of value based on longest version key
        justification = (longest - len(ver)) + len(value)
        print(f"  {ver}:  {value:>{justification}}")

def list_softwaretitle_policy_versions(api, name):
    jssid = find_softwaretitle(api, name, details=False)['id']
    versions = []
    for patch in softwaretitle_policies(api, jssid):
        p = api.get(f"patchpolicies/id/{patch['id']}")
        version = p['patch_policy']['general']['target_version']
        versions.append((version, patch['name']))
    # print formatted result
    print_version_key_list(versions)

def softwaretitle_policies(api, jssid):
    """
    :returns: list of software title patch policies
    """
    endpoint = f"patchpolicies/softwaretitleconfig/id/{jssid}"
    return api.get(endpoint)['patch_policies']['patch_policy']

# def update_softwaretitle_versions(api, name, versions, pkgs=None):
#     """
#     Update all
#     :param api:      JSS API object
#     :param name:     external patch definition name
#     :param versions: {'Tech': version, 'Guinea Pig': version, 'Stable': version}
#     :returns:
#     """
#     logger = logging.getLogger(__name__)
#     jssid = find_softwaretitle(api, name, details=False)['id']
#
#     if pkgs:
#         update_softwaretitle_packages(api, jssid, pkgs)
#
#     for p in softwaretitle_policies(api, jssid):
#         # 'Tech - Test Boxes - Keynote' -> 'Tech'
#         # 'Guinea Pig - Lab - Xcode' -> 'Guinea Pig'
#         branch = p['name'].split(' - ')[0]
#         try:
#             update_patch_policy_version(api, p['id'], versions[branch])
#         except KeyError:
#             logger.debug(f"skipping: {p['name']!r}")
#
# def update_patch_policy_version(api, jssid, version):
#     """
#     Update Patch Policy version
#     """
#     logger = logging.getLogger(__name__)
#     current = api.get(f"patchpolicies/id/{jssid}")
#     current_version = current['patch_policy']['general']['target_version']
#     name = current['patch_policy']['general']['name']
#
#     if current_version != version:
#         logger.info(f"updating: {name!r}: {version}")
#         data = {'patch_policy': {'general': {'target_version': version}}}
#         api.put(f"patchpolicies/id/{jssid}", data)
#     else:
#         logger.debug(f"already updated: {name}: {version}")
#
# def update_softwaretitle_packages(api, jssid, pkgs):
#     """
#     Update packages of software title
#     :param jssid:        Patch Software Title ID
#     :param pkgs:         dict of {version: package, ...}
#     :returns: None
#     """
#     logger = logging.getLogger(__name__)
#
#     data = api.get(f"patchsoftwaretitles/id/{jssid}")
#     title = data['patch_software_title']
#
#     title_name = title['name']
#     logger.info(f"updating patch software title: {title_name} ({jssid})")
#
#     # single version (dict), multiple versions (list)
#     version = title['versions']['version']
#     _modified = False
#     try:
#         # access key of single version and count on TypeError being raised
#         v = version['software_version']
#         if v in pkgs.keys():
#             version['package'] = {'name': pkgs[v]}
#             _modified = True
#
#     except TypeError:
#         # looks like it was actually a list
#         for _version in version:
#             v = _version['software_version']
#             if v in pkgs.keys():
#                 _version['package'] = {'name': pkgs[v]}
#                 _modified = True
#
#     if _modified:
#         result = api.put(f"patchsoftwaretitles/id/{jssid}", data)
#         logger.info(f"succesfully updated: {title_name}")
#         return result
#     else:
#         logger.info(f"software title was not modified")

###############################################################################

def confirm(_message):
    """
    Ask user to enter Y or N (case-insensitive).
    :return: True if the answer is Y.
    :rtype: bool
    """
    answer = ""
    while answer not in ["y", "n"]:
        answer = input(_message).lower()
    return answer == "y"

def main(argv):
    # THERE ARE EXITS THROUGHOUT
    logger = logging.getLogger(__name__)
    timmy = Parser()
    args = timmy.parse(argv)
    logger.debug(f"args: {args!r}")
    if args.version:
        print("jctl "+__version__)
        print("python_jamf "+jamf.__version__+ " ("+min_jamf_version+" required)")
        exit()
    check_version()
    if args.config:
        api = jamf.API(config_path=args.config)
    else:
        api = jamf.API()
    if not args.quiet_as_a_mouse and args.rm:
        print(api.url)
    # Get the records
    jamf_record_class = jamf.records.class_name(args.record, case_sensitive=False)
    results = []
    if args.regex or args.name or args.id:
        if args.regex:
            results = results+jamf_record_class().list(regexes=args.regex, returnIds=True)
        if args.name:
            results = results+jamf_record_class().list(exactMatches=args.name, returnIds=True)
        if args.id:
            results = results+jamf_record_class().list(ids=args.id, returnIds=True)
    else:
        results = jamf_record_class().list(returnIds=True)
    if not results:
        exit()
    results = sorted(results)

    # Do something with records
    for data_ in results:
        if args.long or args.searchpath or args.path:
            long_data = jamf_record_class(data_[1])

        filtered = False
        if args.searchpath:
            for searchpath in args.searchpath:
                m = re.match("(.*)=(.*)", searchpath)
                if (not filtered and m):
                    path_data = long_data.path(m[1])
                    if isinstance(path_data, str):
                        if path_data != m[2]:
                            filtered = True
                    else:
                        print(f"Can't find {m[2]} in {m[1]} because it is:")
                        pprint(path_data)
                        exit()
        if filtered:
            continue

        # Print feedback
        if args.quiet_as_a_mouse:
            pass
        elif args.path:
            if args.json:
                for path_ in args.path:
                    print(json.dumps(long_data.path(path_)))
            else:
                for path_ in args.path:
                    pprint(long_data.path(path_))
        elif args.long:
            if args.json:
                print(json.dumps(long_data))
            else:
                pprint(long_data.data())
        else:
            print(data_[0])

        # Actions
        if args.rm:
            if args.use_the_force_luke:
                doit = True
            else:
                doit = confirm("Are you sure you want to delete this record [y/n]? ")
            if doit:
                print("Deleting record")
                jamf_record_class(data_[0]).delete()


if __name__ == '__main__':
    fmt = '%(asctime)s: %(levelname)8s: %(name)s - %(funcName)s(): %(message)s'
    logging.basicConfig(level=logging.INFO, format=fmt)
    try:
        main(sys.argv[1:])
    except KeyboardInterrupt:
            sys.exit(1)